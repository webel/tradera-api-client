import { Service } from "../service";
export declare class PublicService extends Service {
    GetCategories(): Promise<GetCategoriesResult>;
    GetItem(request: GetItemRequest): Promise<{
        AcceptedBuyerId: number;
        AcceptsPickup: boolean;
        Bold: boolean;
        BuyItNowPrice: number | undefined;
        Buyers: {
            Id: number;
            Alias: string;
            TotalRating: number;
        }[];
        CategoryId: number;
        EndDate: Date;
        FeaturedItem: boolean;
        Highlight: boolean;
        Id: number;
        ImageLinks: {
            string: string[];
        };
        ItemAttributes: {
            int: number[];
        };
        ItemLink: string;
        ItemType: "Auction" | "PureBuyItNow" | "ShopItem";
        LongDescription: string;
        MaxBid: number;
        MaxBidder: {
            Id: number;
            Alias: string;
            TotalRating: number;
        } | null;
        NextBid: number;
        OpeningBid: number;
        OwnReferences: string[] | null;
        PaymentCondition: string;
        PaymentOptions: {
            int: number[];
        };
        PaymentTypeId: number;
        Paypal: boolean;
        RemainingQuantity: number;
        ReservePrice: number | undefined;
        ReservePriceReached: boolean | undefined;
        Seller: {
            Id: number;
            Alias: string;
            TotalRating: number;
        };
        ShippingCondition: string;
        ShippingOptions: {
            ShippingOptionId: number;
            Cost: number;
            ShippingWeight: number | undefined;
            ShippingProductId: number | undefined;
        }[];
        ShortDescription: string;
        StartDate: Date;
        StartQuantity: number;
        Status: {
            Ended: boolean;
            GotBidders: boolean;
            GotWinner: boolean;
        };
        Thumbnail: boolean;
        ThumbnailLink: string;
        TotalBids: number;
        VAT: number | undefined;
    }>;
    GetOfficalTime(): Promise<Date>;
    GetSearchResultAdvanced(filter?: GetSearchResultAdvancedRequest): Promise<GetSearchResultAdvancedResult>;
    GetSellerItems(request: GetSellerItemsRequest): Promise<{
        TotalNumberOfItems: number;
        TotalNumberOfPages: number;
        Items: {
            ItemId: number;
            Title: string;
            Description: string;
            StartPrice: number;
            Currency: string;
            CategoryId: number;
            CategoryName: string;
            StartTime: string;
            EndTime: string;
            SellerId: number;
            SellerName: string;
            SellerEmail: string;
            SellerRating: number;
            SellerRatingCount: number;
            SellerCountry: string;
            SellerCounty: string;
            SellerCity: string;
            SellerZipCode: string;
            SellerAddress: string;
            SellerPhone: string;
            SellerMobile: string;
            SellerFax: string;
            SellerUrl: string;
            SellerCompany: string;
            SellerInfo: string;
            BidCount: number;
            HighBidderId: number;
            HighBidderName: string;
            HighBidderEmail: string;
            HighBidderRating: number;
            HighBidderRatingCount: number;
            HighBidderCountry: string;
            HighBidderCounty: string;
            HighBidderCity: string;
            HighBidderZipCode: string;
            HighBidderAddress: string;
            HighBidderPhone: string;
            HighBidderMobile: string;
            HighBidderFax: string;
            HighBidderUrl: string;
            HighBidderCompany: string;
            HighBidderInfo: string;
            BuyNowPrice: number;
            BuyNowCurrency: string;
            PictureUrl: string;
            PictureWidth: number;
            PictureHeight: number;
            PictureThumbUrl: string;
            PictureThumbWidth: number;
            PictureThumbHeight: number;
            IsBuyNow: boolean;
            IsAuction: boolean;
            IsFixedPrice: boolean;
            IsNew: boolean;
            IsCharity: boolean;
            IsBuyerRegistred: boolean;
            IsSellerRegistred: boolean;
            IsPrivateAuction: boolean;
            IsCompanySale: boolean;
            IsPowerSeller: boolean;
            IsAdult: boolean;
            IsVerifiedSeller: boolean;
            IsAuthenticated: boolean;
            IsAuthenticatedBuyer: boolean;
            IsAuthenticatedSeller: boolean;
        }[];
    }>;
    GetUserByAlias(request: GetUserByAliasRequest): Promise<GetUserByAliasResult>;
}
type GetItemRequest = {
    itemId: number;
};
type GetSearchResultAdvancedResult = {
    TotalNumberOfItems: number;
    TotalNumberOfPages: number;
    Items: {
        ShippingOptions: {
            ShippingOptionId: number;
            Cost: number;
            ShippingWeight: number;
            ShippingProductId: number;
        }[];
        PaymentOptions: unknown;
        ImageLinks: string[];
        Buyers: {
            Id: number;
            Alias: string;
            FirstName: string;
            LastName: string;
            Email: string;
            TotalRating: number;
            PhoneNumber: string;
            MobilePhoneNumber: string;
            Address: string;
            ZipCode: string;
            City: string;
            CountryName: string;
            TransactionId: number;
        }[];
        Status: {
            Ended: boolean;
            GotBidders: boolean;
            GotWinner: boolean;
        };
        StartQuantity: number;
        RemainingQuantity: number;
        ItemType: "Auction" | "PureBuyItNow" | "ShopItem";
        Id: number;
        VAT: number;
        ShortDescription: string;
        OwnReferences: unknown;
        AttributeValues: unknown;
        ItemAttributes: unknown;
        LongDescription: string;
        StartDate: Date;
        EndDate: Date;
        CategoryId: number;
        OpeningBid: number;
        ReservePrice: number;
        ReservePriceReached: boolean;
        BuyItNowPrice: number;
        NextBid: number;
        PaymentCondition: string;
        ShippingCondition: string;
        AcceptsPickup: boolean;
        TotalBids: number;
        MaxBid: number;
        Bold: boolean;
        Thumbnail: boolean;
        Highlight: boolean;
        FeaturedItem: boolean;
        ItemLink: string;
        ThumbnailLink: string;
        AcceptedBuyerId: number;
        Paypal: boolean;
        PaymentTypeId: number;
        Seller: {
            Id: number;
            Alias: string;
            FirstName: string;
            LastName: string;
            Email: string;
            TotalRating: number;
            PhoneNumber: string;
            MobilePhoneNumber: string;
            Address: string;
            ZipCode: string;
            City: string;
            CountryName: string;
            TransactionId: number;
        };
        MaxBidder: {
            Id: number;
            Alias: string;
            FirstName: string;
            LastName: string;
            Email: string;
            TotalRating: number;
            PhoneNumber: string;
            MobilePhoneNumber: string;
            Address: string;
            ZipCode: string;
            City: string;
            CountryName: string;
            TransactionId: number;
        };
    }[];
};
type GetSearchResultAdvancedRequest = {
    query: {
        SearchWords?: string;
        CategoryId?: number;
        SearchInDescription?: boolean;
        Mode?: "AllWords" | "AnyWords";
        PriceMinimum?: number;
        PriceMaximum?: number;
        BidsMinimum?: number;
        BidsMaximum?: number;
        ZipCode?: string;
        CountyId?: number;
        Alias?: string;
        Brands?: string[];
        Attributes?: any;
        OrderBy?: "EndDateAscending" | "EndDateDescending" | "PriceAscending" | "PriceDescending" | "BidsDescending";
        ItemStatus?: "Active" | "Ended";
        ItemType?: "All" | "Auction" | "FixedPrice";
        OnlyAuctionsWithBuyNow?: boolean;
        OnlyItemsWithThumbnail?: boolean;
        ItemsPerPage?: number;
        PageNumber?: number;
        ItemConditon?: "All" | "OnlyNew" | "OnlySecondHand";
        SellerType?: "All" | "OnlyPrivate" | "OnlyBusiness";
        ItemTypes?: string[];
        ItemStatuses?: string[];
        IncludeEndedItems?: boolean;
        IncludeItemsWithNoBids?: boolean;
        IncludeItemsWithReserveNotMet?: boolean;
        IncludeItemsWithNoReserve?: boolean;
        IncludeItemsWithBuyNow?: boolean;
        IncludeItemsWithNoBuyNow?: boolean;
        IncludeItemsWithNoThumbnail?: boolean;
        IncludeItemsWithThumbnail?: boolean;
        IncludeItemsWithNoAcceptedPayments?: boolean;
        IncludeItemsWithAcceptedPayments?: boolean;
        IncludeItemsWithNoShippingOptions?: boolean;
        IncludeItemsWithShippingOptions?: boolean;
    };
};
type CategoryAttributes = {
    Id: number;
    Name: string;
};
type Category = {
    attributes: CategoryAttributes;
    Category?: Category[] | CategoryAttributes[];
};
type GetCategoriesResult = {
    Category: Category[];
};
type GetSellerItemsRequest = {
    sellerId: number;
    pageNumber?: number;
    pageSize?: number;
    sort?: string;
    filter?: string;
};
type GetUserByAliasRequest = {
    alias: string;
};
type GetUserByAliasResult = {
    Id: number;
    Alias: string;
    FirstName: string;
    LastName: string;
    Email: string;
    TotalRating: number;
    PhoneNumber: string;
    MobilePhoneNumber: string;
    Address: string;
    ZipCode: string;
    City: string;
    CountryName: string;
    PersonalNumber: string;
    TransactionId: number;
};
export {};
//# sourceMappingURL=publicService.d.ts.map